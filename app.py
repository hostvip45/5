from flask import Flask, render_template, request, jsonify
import random
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

app = Flask(__name__)

# ุฅุนุฏุงุฏุงุช ุงูุจุฑูุฏ ุงูุฅููุชุฑููู
SMTP_SERVER = "smtp.gmail.com"      # ุฎุงุฏู SMTP (ูุซู Gmail)
SMTP_PORT = 587                     # ุงููููุฐ ุงูุฎุงุต ุจู SMTP (587 ูู Gmail)
SENDER_EMAIL = "your_email@gmail.com"  # ุจุฑูุฏ ุงููุฑุณู
SENDER_PASSWORD = "your_email_password"  # ูููุฉ ูุฑูุฑ ุจุฑูุฏ ุงููุฑุณู

# ูุงุฆูุฉ ุงูุฃูุบุงุฒ ุงูููุณุนุฉ
puzzles = [
    {"question": "ุดูุก ูููุง ุฃุฎุฐุช ููู ูุจุฑุ ูุง ููุ", "answer": "ุงูุญูุฑุฉ", "choices": ["ุงูุญูุฑุฉ", "ุงูุจุญุฑ", "ุงูุฌุจุงู"]},
    {"question": "ูุง ูู ุงูุดูุก ุงูุฐู ููุดู ุจูุง ูุฏููู ููุจูู ุจูุง ุนููููุ", "answer": "ุงูุณุญุงุจ", "choices": ["ุงูุณุญุงุจ", "ุงูููุฑ", "ุงูุฑูุงุญ"]},
    {"question": "ูุง ูู ุงูุดูุก ุงูุฐู ูุชููู ุฌููุน ูุบุงุช ุงูุนุงููุ", "answer": "ุงูุตุฏู", "choices": ["ุงูุตุฏู", "ุงููุชุงุจ", "ุงูุชููุงุฒ"]},
    {"question": "ูู ุฑุฃุณ ููุง ุนูู ููุ ูุง ููุ", "answer": "ุงูุฏุจูุณ", "choices": ["ุงูุฏุจูุณ", "ุงูุนุตุง", "ุงูููู"]},
    {"question": "ุดูุก ูุญููู ูุชุญูููุ ูุตูู ูุงุดู ููุตูู ูุจูููุ ูุง ููุ", "answer": "ุงูุณูููุฉ", "choices": ["ุงูุณูููุฉ", "ุงููุงุฑุจ", "ุงูุฌุณุฑ"]},
    {"question": "ุดูุก ูุณูุน ุจูุง ุฃุฐู ููุชููู ุจูุง ูุณุงูุ ูุง ููุ", "answer": "ุงููุงุชู", "choices": ["ุงููุงุชู", "ุงูุฑุงุฏูู", "ุงูุชููุงุฒ"]},
    {"question": "ูู ุฃูุฑุงู ููุง ูู ุจูุจุงุชุ ูู ุฌูุฏ ููุง ูู ุจุญููุงูุ ูุนูู ููุง ูู ุจุฅูุณุงูุ ูุง ููุ", "answer": "ุงููุชุงุจ", "choices": ["ุงููุชุงุจ", "ุงูุฏูุชุฑ", "ุงูููุญุฉ"]},
    {"question": "ูุง ูู ุงูุจูุช ุงูุฐู ููุณ ููู ุฃุจูุงุจ ููุง ููุงูุฐุ", "answer": "ุจูุช ุงูุดุนุฑ", "choices": ["ุจูุช ุงูุดุนุฑ", "ุจูุช ุงูููู", "ุจูุช ุงูุญุดุฑุงุช"]},
    {"question": "ูุง ูู ุงูุดูุก ุงูุฐู ููุฑุตู ููุง ุชุฑุงูุ", "answer": "ุงูุฌูุน", "choices": ["ุงูุฌูุน", "ุงูุนุทุด", "ุงูุจุฑุฏ"]},
    {"question": "ูููุง ุฒุงุฏ ููุตุ ูุง ููุ", "answer": "ุงูุนูุฑ", "choices": ["ุงูุนูุฑ", "ุงูุญูุฑุฉ", "ุงููุงุก"]}
]

# ูุงุฆูุฉ ูุชุฎุฒูู ุจูุงูุงุช ุงููุงุนุจูู ูุคูุชูุง
players_scores = {}

# ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ
@app.route('/')
def index():
    return render_template('index.html')

# ุจุฏุก ุงููุนุจุฉ ูุงุฎุชูุงุฑ ุฃูุบุงุฒ ุนุดูุงุฆูุฉ
@app.route('/start_game', methods=['POST'])
def start_game():
    data = request.json
    player_name = data.get("player_name")
    player_email = data.get("player_email")

    # ุงุฎุชูุงุฑ 5 ุฃูุบุงุฒ ุนุดูุงุฆูุฉ ููุนุจุฉ ุงูุญุงููุฉ
    selected_puzzles = random.sample(puzzles, 5)
    players_scores[player_name] = {
        "score": 0,
        "current_question": 0,
        "email": player_email,
        "puzzles": selected_puzzles
    }
    return jsonify({"message": f"ูุฑุญุจูุง {player_name}! ุจุฏุฃุช ุงููุนุจุฉ!"})

# ุฅุฑุณุงู ุงูุณุคุงู ุงูุชุงูู ูุน ุงูุฎูุงุฑุงุช
@app.route('/get_question', methods=['POST'])
def get_question():
    data = request.json
    player_name = data.get("player_name")
    player_info = players_scores.get(player_name)

    if not player_info:
        return jsonify({"error": "ุงููุงุนุจ ุบูุฑ ููุฌูุฏ"}), 404

    question_index = player_info["current_question"]
    puzzles = player_info["puzzles"]

    if question_index < len(puzzles):
        question = puzzles[question_index]
        choices = question["choices"].copy()
        random.shuffle(choices)
        return jsonify({
            "question": question["question"],
            "choices": choices,
            "index": question_index
        })
    else:
        return jsonify({"message": f"ุชูุงูููุง! ุฃูููุช ุงููุนุจุฉ ุจุฑุตูุฏ {player_info['score']} ููุทุฉ"})

# ุงูุชุญูู ูู ุงูุฅุฌุงุจุฉ
@app.route('/submit_answer', methods=['POST'])
def submit_answer():
    data = request.json
    player_name = data.get("player_name")
    selected_answer = data.get("answer").strip().lower()
    question_index = data.get("index")
    player_info = players_scores.get(player_name)
    
    if question_index < len(player_info["puzzles"]):
        correct_answer = player_info["puzzles"][question_index]["answer"]
        if selected_answer == correct_answer:
            player_info["score"] += 10  # ุฅุถุงูุฉ ุงูููุงุท
            player_info["current_question"] += 1
            return jsonify({"message": "ุฅุฌุงุจุฉ ุตุญูุญุฉ! ๐", "score": player_info["score"]})
        else:
            player_info["current_question"] += 1
            return jsonify({"message": "ุฅุฌุงุจุฉ ุฎุงุทุฆุฉ! ๐", "score": player_info["score"]})
    return jsonify({"error": "ุทูุจ ุบูุฑ ุตุญูุญ"}), 400

# ูุณุงุฑ ุงูุฎุฑูุฌ ูู ุงููุนุจุฉ
@app.route('/exit_game', methods=['POST'])
def exit_game():
    data = request.json
    player_name = data.get("player_name")
    player_info = players_scores.get(player_name)

    if player_info:
        player_email = player_info["email"]
        score = player_info["score"]
        
        # ุฅุฑุณุงู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ุนูุฏ ุงูุฎุฑูุฌ
        send_exit_email(player_name, player_email, score)

        # ุญุฐู ุจูุงูุงุช ุงููุงุนุจ ูู ุงููุนุจุฉ
        players_scores.pop(player_name, None)
        
        return jsonify({"message": f"ุชู ุงูุฎุฑูุฌ ุจูุฌุงุญุ ุชู ุฅุฑุณุงู ุจุฑูุฏ ุฅููุชุฑููู ุฅูู {player_email}!"})
    else:
        return jsonify({"error": "ุงููุงุนุจ ุบูุฑ ููุฌูุฏ"}), 404

# ุฏุงูุฉ ุฅุฑุณุงู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ุนูุฏ ุงูุฎุฑูุฌ
def send_exit_email(player_name, player_email, score):
    subject = "ุฎุฑูุฌ ูู ูุนุจุฉ ุงูุฃูุบุงุฒ"
    body = f"ูุฑุญุจุงู {player_name}!\n\nููุฏ ุฎุฑุฌุช ูู ูุนุจุฉ ุงูุฃูุบุงุฒ. ูุฌููุน ููุงุทู ูู: {score}.\nูุชููู ูู ุงูุนูุฏุฉ ูุฑูุจุงู ูุฅููุงู ุงูุชุญุฏู! ๐"
    
    # ุฅุนุฏุงุฏ ุงูุฑุณุงูุฉ
    msg = MIMEMultipart()
    msg["From"] = SENDER_EMAIL
    msg["To"] = player_email
    msg["Subject"] = subject
    msg.attach(MIMEText(body, "plain"))
    
    try:
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()  # ุชุฃููู ุงูุงุชุตุงู
        server.login(SENDER_EMAIL, SENDER_PASSWORD)
        server.sendmail(SENDER_EMAIL, player_email, msg.as_string())
        server.quit()
        print(f"ุชู ุฅุฑุณุงู ุจุฑูุฏ ุฅููุชุฑููู ุฅูู {player_email} ุจููุงุทู ุงูุญุงููุฉ!")
    except Exception as e:
        print(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅุฑุณุงู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู: {e}")

if __name__ == '__main__':
    app.run(debug=True)
